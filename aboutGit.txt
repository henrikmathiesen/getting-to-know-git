# ABOUT GIT

# LAYERS

- Distributed Revision Control System
- Revision Control System
- A Stupid Content Tracker
- A Persistant Map, key to values, stored on disc - The Core


# The Core Layer - A Persistant Map

- values are a squence of bytes, for example a text file
- keys are hashes, SHA1
$ echo "Apple Pie" | git hash-object --stdin // will give a hash key for the text
- Every file, directory and commit has a hash key and the key is unique

Persisting a change
$ echo "Apple Pie" | git hash-object --stdin -w // need a repository, content is saved (it does however not register as a change when git status (because it is saved directly?))
- it is saved to .git/objects/xx where xx is first 2 digits of hash, there is a file in there (GIT calls it a BLOB of data) with a name that is the rest of the characters in the hash
$ git cat-file prints info about the hash, see arguments bellow
$ git cat-file hash -t // -t = type , blob
$ git cat-file hash -p // -p = pretty, Apple Pie


# The Content Tracker Layer

$ git status // show untracked files as red, GIT does not know what to do with them
- to commit a file it must be put in the so called staging area, a launch platform that contains content for commiting
$ git add ... use tab to auto complete
$ git status shows green files, they are now in the staging area, ready to be commited
$ git commit -m "Some comment", the content are now stored as hashes in .git/objects

$ git cat-file commitnumber -p , prints info about the commit
$ git cat-file treenumber -p , prints the hashes of contents in the commit , the first characters is data about access permissions

If two files have the same contentent they will have the same hash

Versioning

$ git cat-file -p commithash , shows
parent hash , is the prev commit
the commits are linked
they are in a different tree

$ git count-objects , list ammount of objects in .git/objects and disc space


Annotatet tag
$ git tag -a mytag -m "I like apple pie"
$ git tag , prints mytag
$ git cat-file -p mytag , prints info about the tag

Lightweight tag
$ git tag sometag
$ git tag , prints tags
$ cat .git/refs/tags/dinner , prints hash to latest commit when tag was created

A tag is like a branch that doesnt move to another commit


GIT objects recap
- Blobs (content)
- Trees (directories)
- Commits
- Annotatet tags


# The Revision Control System Layer

$ git branch , list branches
git puts branches in .git/refs/heads
$ cat .git/refs/heads/master
The branch files contains the hash of the current commit
A branch is a reference (hence the directory name ref) to a commit

Active branch is stored in .git/HEAD as 'ref: refs/heads/master'

HEAD is a reference to a branch

When making a commit the current branch is repointed to the new commit
HEAD is still pointing to master

When switching branch HEAD then points to the switched to branch, which in turn points to the latest commit done in that branch
$ git checkout branchname , means move HEAD and update the working area

$git merge lisa , merge lisa with master (when being on the master branch)
There was a conflict, resolve it in the code editor and then add and commit
If there were no conflicts then git would have commited automaticly


A merge is just a commit!
With one exception, it has 2 parents
$ git cat-file -p commithash



HEAD is pointing to current branch
current branch is pointing to latest commit
commits points to Blobs (via tree)
commits has a parent commit


Fast forward
- we switch to lisa branch and merge in master
- since we merged in lisa to master and resolved the conflicts there, GIT just fast forward lisa to master
- there is nothing commit since there already exist such a commit



Rebase
- "detach current branch and copies it ontop off the target branch, leaving the old copies"
- The old copies will be garbage collected (because no branch points to them)

Difference between Merge and Rebase
- merge preservs history exactly as it happened
- rebase looks more streamlined history wise, "but it is a lie"
-- when in doubt, just merge!!


# The Distributed Revision Control System Layer

$ git clone http://url ... , clones the project into current folder and copied the .git directory (with its history), but includes ONLY the master branch, and checkouts the master branch
- in .git/config we see info about the repo, with an adress to remote url (GIT calls it remote "origin"), GIT sets it when clone operation completes
- .git/refs/remotes/origin contains remote branches

$ git show-ref master , which commits does local master and remote master point to

// Same thing
fetch > merge > push
pull > push









# Getting social
- fork = a remote clone on GITHUB, then we can clone that one to our local machine
- it is then NO connection to the original project that we forked from
- we can however create a new remote pointing to the forked repo (called upstrem) to keep track of changes from that original repo
- we CAN NOT push to upstream because we do not have access rights
- But we can create a PULL REQUEST (a GIT HUB feature), encourage the original repo to pull in our changes, a REMOTE PULL from ours to theirs



//
//
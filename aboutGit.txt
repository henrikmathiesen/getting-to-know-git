# ABOUT GIT

# LAYERS

- Distributed Revision Control System
- Revision Control System
- A Stupid Content Tracker
- A Persistant Map, key to values, stored on disc - The Core


# The Core Layer - A Persistant Map

- values are a squence of bytes, for example a text file
- keys are hashes, SHA1
$ echo "Apple Pie" | git hash-object --stdin // will give a hash key for the text
- Every file, directory and commit has a hash key and the key is unique

Persisting a change
$ echo "Apple Pie" | git hash-object --stdin -w // need a repository, content is saved (it does however not register as a change when git status (because it is saved directly?))
- it is saved to .git/objects/xx where xx is first 2 digits of hash, there is a file in there (GIT calls it a BLOB of data) with a name that is the rest of the characters in the hash
$ git cat-file 23991897e13e47ed0adb91a0082c31c82fe0cbe5 -t // -t = type , blob
$ git cat-file 23991897e13e47ed0adb91a0082c31c82fe0cbe5 -p // -p = pretty, Apple Pie


# The Content Tracker Layer

$ git status // show untracked files as red, GIT does not know what to do with them
- to commit a file it must be put in the so called staging area, a launch platform that contains content for commiting
$ git add ... use tab to auto complete
$ git status shows green files, they are now in the staging area, ready to be commited
$ git commit -m "Some comment", the content are now stored as hashes in .git/objects

$ git cat-file commitnumber -p , prints info about the commit
$ git cat-file treenumber -p , prints the hashes of contents in the commit , the first characters is data about access permissions

If two files have the same contentent they will have the same hash

Versioning

$ git cat-file -p commithash , shows
parent hash , is the prev commit
the commits are linked
they are in a different tree

$ git count-objects , list ammount of objects in .git/objects and disc space


Annotatet tag
$ git tag -a mytag -m "I like apple pie"
$ git tag , prints mytag
$ git cat-file -p mytag , prints info about the tag


GIT objects recap
- Blobs (content)
- Trees (directories)
- Commits
- Annotatet tags